type: collection.insomnia.rest/5.0
name: LawexaAPIV2
meta:
  id: wrk_3424448e99fa45f291eab46192bc6dcf
  created: 1751935123718
  modified: 1751935123718
  description: ""
collection:
  - name: Auth
    meta:
      id: fld_a5892b796bab4e51ad38b4e052b2aed1
      created: 1751451883131
      modified: 1751451883131
      sortKey: -1751451883131
      description: ""
    children:
      - url: "{{ _.host }}/api/auth/google"
        name: Auth with Google
        meta:
          id: req_c0e5d6840bb447e0a13894fc75e85ddd
          created: 1751826959877
          modified: 1752109741942
          isPrivate: false
          description: >
            **Google OAuth Authentication**


            Initiates Google OAuth authentication flow. Returns a redirect URL
            that should be used to redirect users to Google's authentication
            page.


            **Response:**

            ```json

            {
              "url": "https://accounts.google.com/oauth/authorize?..."
            }

            ```


            **Flow:**

            1. Call this endpoint to get Google OAuth URL

            2. Redirect user to the returned URL

            3. User authenticates with Google

            4. Google redirects back to your callback URL with a temporary code

            5. Exchange the code for an access token using the callback endpoint
          sortKey: -1751826959877
        method: GET
        headers:
          - name: User-Agent
            value: insomnia/11.2.0
          - name: accept
            value: application/json
          - name: content-type
            value: application/json
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.host }}/api/auth/me"
        name: Me
        meta:
          id: req_fd54e466d0bf48ea9ce56852a9f380dd
          created: 1751832263884
          modified: 1751858458888
          isPrivate: false
          description: |
            **Get Current User Profile**

            Retrieves the authenticated user's profile information.

            **Authentication:** Required (Bearer Token)

            **Response:**
            ```json
            {
              "status": "success",
              "message": "User profile retrieved successfully",
              "data": {
                "user": {
                  "id": 1,
                  "name": "John Doe",
                  "email": "john@example.com",
                  "role": "user",
                  "avatar": "https://example.com/avatar.jpg",
                  "created_at": "2023-01-01T00:00:00.000000Z",
                  "updated_at": "2023-01-01T00:00:00.000000Z"
                }
              }
            }
            ```
          sortKey: -1751540939219
        method: GET
        headers:
          - name: Authorization
            value: Bearer {{ _.token }}
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.host }}/api/auth/register"
        name: Register
        meta:
          id: req_7da95e6c3b344235ba77e60e3e754a6a
          created: 1751858065228
          modified: 1752110979283
          isPrivate: false
          description: >
            **User Registration**


            Creates a new user account and returns an authentication token.


            **Request Body:**

            ```json

            {
              "name": "John Doe",
              "email": "john@example.com",
              "password": "password123",
              "password_confirmation": "password123",
              "role": "user"
            }

            ```


            **Validation Rules:**

            - `name`: Required, string, max 255 characters

            - `email`: Required, valid email, max 255 characters, must be unique

            - `password`: Required, string, min 8 characters, must match
            confirmation

            - `password_confirmation`: Required, must match password

            - `role`: Optional, must be one of: user, admin, researcher,
            superadmin (defaults to "user")


            **Success Response (201):**

            ```json

            {
              "status": "success",
              "message": "User registered successfully",
              "data": {
                "user": {
                  "id": 1,
                  "name": "John Doe",
                  "email": "john@example.com",
                  "role": "user",
                  "created_at": "2023-01-01T00:00:00.000000Z",
                  "updated_at": "2023-01-01T00:00:00.000000Z"
                },
                "token": "1|abc123def456..."
              }
            }

            ```


            **Error Response (422):**

            ```json

            {
              "status": "error",
              "message": "Validation failed",
              "errors": {
                "email": ["The email has already been taken."],
                "password": ["The password must be at least 8 characters."]
              }
            }

            ```
          sortKey: -1751540939319
        method: POST
        body:
          mimeType: application/json
          text: |-
            {
            	"name": "{% faker 'randomFullName' %}",
            	"email":"{% faker 'randomEmail' %}",
            	"password":"password123",
            	"password_confirmation":"password123",
            	"role":"admin"
            }
        headers:
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
          - name: accept
            value: application/json
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.host }}/api/auth/login"
        name: Login
        meta:
          id: req_64d6abada6eb48529797f56de4db94c9
          created: 1751858500000
          modified: 1752111714501
          isPrivate: false
          description: >
            **User Login**


            Authenticates a user with email and password, returning an access
            token.


            **Request Body:**

            ```json

            {
              "email": "john@example.com",
              "password": "password123"
            }

            ```


            **Validation Rules:**

            - `email`: Required, valid email format

            - `password`: Required, string


            **Success Response (200):**

            ```json

            {
              "status": "success",
              "message": "Login successful",
              "data": {
                "user": {
                  "id": 1,
                  "name": "John Doe",
                  "email": "john@example.com",
                  "role": "user",
                  "created_at": "2023-01-01T00:00:00.000000Z",
                  "updated_at": "2023-01-01T00:00:00.000000Z"
                },
                "token": "1|abc123def456..."
              }
            }

            ```


            **Error Response (401):**

            ```json

            {
              "status": "error",
              "message": "Invalid credentials"
            }

            ```
          sortKey: -1751540939419
        method: POST
        body:
          mimeType: application/json
          text: '{"email":"Bethel_Witting2@yahoo.com","password":"password123"}'
        headers:
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
          - name: accept
            value: application/json
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.host }}/api/auth/logout"
        name: Logout
        meta:
          id: req_57ea06f6cfec4fc286afa5a67db28be6
          created: 1751858600000
          modified: 1752109929315
          isPrivate: false
          description: |
            **User Logout**

            Logs out the current user by invalidating their access token.

            **Authentication:** Required (Bearer Token)

            **Success Response (200):**
            ```json
            {
              "status": "success",
              "message": "Logged out successfully",
              "data": null
            }
            ```
          sortKey: -1751540939519
        method: POST
        headers:
          - name: Authorization
            value: Bearer {{ _.token }}
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
          - name: accept
            value: application/json
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.host }}/api/user/profile"
        name: Update Profile
        meta:
          id: req_debd8863fab74d75b2f6b2aee4beebd2
          created: 1751858700000
          modified: 1752114232220
          isPrivate: false
          description: >
            **Update User Profile**


            Updates the authenticated user's profile information.


            **Authentication:** Required (Bearer Token)


            **Request Body:**

            ```json

            {
              "name": "John Updated",
              "email": "john.updated@example.com",
              "password": "newpassword123",
              "password_confirmation": "newpassword123"
            }

            ```


            **Validation Rules:**

            - `name`: Optional, string, max 255 characters

            - `email`: Optional, valid email, max 255 characters, must be unique

            - `password`: Optional, string, min 8 characters, must match
            confirmation

            - `password_confirmation`: Required if password is provided


            **Success Response (200):**

            ```json

            {
              "status": "success",
              "message": "Profile updated successfully",
              "data": {
                "user": {
                  "id": 1,
                  "name": "John Updated",
                  "email": "john.updated@example.com",
                  "role": "user",
                  "created_at": "2023-01-01T00:00:00.000000Z",
                  "updated_at": "2023-01-01T12:00:00.000000Z"
                }
              }
            }

            ```


            **Error Response (422):**

            ```json

            {
              "status": "error",
              "message": "Validation failed",
              "errors": {
                "email": ["The email has already been taken."]
              }
            }

            ```
          sortKey: -1751540939619
        method: PUT
        body:
          mimeType: application/json
          text: |-
            {
            	"role":"superadmin"
            }
        headers:
          - name: Authorization
            value: Bearer {{ _.token }}
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
          - name: accept
            value: application/json
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.host }}/api/auth/google/callback"
        name: Google OAuth Callback
        meta:
          id: req_30bd2e2deb274f6c8e6604807fb45a42
          created: 1751858800000
          modified: 1751858800000
          isPrivate: false
          description: >
            **Google OAuth Callback**


            Handles the callback from Google OAuth service. This endpoint is
            called automatically by Google after user authentication.


            **Note:** This endpoint is typically not called directly by clients.
            It's used by Google's OAuth service to redirect users back to your
            application.


            **Query Parameters:**

            - `code`: Authorization code from Google

            - `state`: State parameter for security


            **Response:** Redirects to frontend with temporary code:

            ```

            {frontend_url}/auth/callback?code={temporary_code}

            ```


            **Error Response:** Redirects to frontend with error code:

            ```

            {frontend_url}/auth/callback?code={error_code}

            ```
          sortKey: -1751540939719
        method: GET
        headers:
          - name: User-Agent
            value: insomnia/11.2.0
          - name: accept
            value: application/json
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.host }}/api/auth/google/exchange"
        name: Exchange Code for Token
        meta:
          id: req_535186c8d21a4e02b77776d7d099dc20
          created: 1751858900000
          modified: 1752109745584
          isPrivate: false
          description: >
            **Exchange Code for Token**


            Exchanges the temporary code received from Google OAuth callback for
            an access token.


            **Request Body:**

            ```json

            {
              "code": "abc123def456789012345678901234567890"
            }

            ```


            **Validation Rules:**

            - `code`: Required, string, exactly 32 characters


            **Success Response (200):**

            ```json

            {
              "status": "success",
              "message": "Google authentication successful",
              "data": {
                "token": "1|abc123def456...",
                "user": {
                  "id": 1,
                  "name": "John Doe",
                  "email": "john@example.com",
                  "role": "user",
                  "google_id": "1234567890",
                  "avatar": "https://lh3.googleusercontent.com/...",
                  "created_at": "2023-01-01T00:00:00.000000Z",
                  "updated_at": "2023-01-01T00:00:00.000000Z"
                }
              }
            }

            ```


            **Error Response (400):**

            ```json

            {
              "status": "error",
              "message": "Invalid or expired code"
            }

            ```


            **Error Response (400) - OAuth Error:**

            ```json

            {
              "status": "error",
              "message": "Google authentication failed",
              "data": {
                "error_code": "oauth_error",
                "error_message": "Authentication failed",
                "details": "Google OAuth authentication failed"
              }
            }

            ```
          sortKey: -1751540939819
        method: POST
        body:
          mimeType: application/json
          text: |-
            {
            	"code": "wl21YodydAIk82Zpnn2VMCoC4fJymZTg"
            }
        headers:
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
          - name: accept
            value: application/json
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
    scripts:
      afterResponse: ""
      preRequest: ""
  - name: User
    meta:
      id: fld_b6893c807cbc4f62be49c5f153c3bfe2
      created: 1736516400000
      modified: 1736516400000
      sortKey: -1736516400000
      description: "User management endpoints for admin and superadmin users"
    children:
      - url: "{{ _.host }}/api/admin/users/{{ _.user_id }}"
        name: Edit User
        meta:
          id: req_e7f4e5d4c3b2a1f0e9d8c7b6a5f4e3d2
          created: 1736516400000
          modified: 1736516400000
          isPrivate: false
          description: >
            **Edit User Details**


            Allows admin and superadmin users to edit user details including name, email, role, and avatar.


            **Authentication:** Required (Bearer Token) - Admin or Superadmin role


            **Path Parameters:**

            - `user_id`: The ID of the user to edit


            **Request Body:**

            ```json

            {
              "name": "Updated Name",
              "email": "updated@example.com",
              "role": "admin",
              "avatar": "https://example.com/avatar.jpg"
            }

            ```


            **Permission Rules:**

            - **Admins:** Can only edit regular users and researchers (role: 'user', 'researcher') and can assign 'user' and 'researcher' roles

            - **Superadmins:** Can edit any user and assign any role (user, admin, researcher, superadmin)


            **Validation Rules:**

            - `name`: Optional, string, max 255 characters

            - `email`: Optional, valid email, max 255 characters, must be unique

            - `role`: Optional, must be one of: user, admin, researcher, superadmin

            - `avatar`: Optional, nullable string, max 255 characters


            **Success Response (200):**

            ```json

            {
              "status": "success",
              "message": "User updated successfully",
              "data": {
                "id": 1,
                "name": "Updated Name",
                "email": "updated@example.com",
                "role": "admin",
                "avatar": "https://example.com/avatar.jpg",
                "google_id": null,
                "email_verified_at": "2023-01-01T00:00:00.000000Z",
                "created_at": "2023-01-01T00:00:00.000000Z",
                "updated_at": "2023-01-01T12:00:00.000000Z"
              }
            }

            ```


            **Error Response (403):**

            ```json

            {
              "status": "error",
              "message": "Unauthorized. Only admins and superadmins can edit users."
            }

            ```


            **Error Response (403) - Role Assignment:**

            ```json

            {
              "status": "error",
              "message": "Unauthorized. You cannot assign this role."
            }

            ```


            **Error Response (403) - Admin Limitation:**

            ```json

            {
              "status": "error",
              "message": "Unauthorized. Admins can only edit regular users and researchers."
            }

            ```


            **Error Response (422):**

            ```json

            {
              "status": "error",
              "message": "Validation failed",
              "errors": {
                "email": ["The email has already been taken."],
                "role": ["The selected role is invalid."]
              }
            }

            ```
          sortKey: -1736516400000
        method: PUT
        body:
          mimeType: application/json
          text: |-
            {
            	"name": "Updated User Name",
            	"email": "updated.user@example.com",
            	"role": "admin",
            	"avatar": "https://example.com/new-avatar.jpg"
            }
        headers:
          - name: Authorization
            value: Bearer {{ _.token }}
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
          - name: accept
            value: application/json
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.host }}/api/admin/users?page=1&per_page=10&sort_by=created_at&sort_direction=desc"
        name: Get Users
        meta:
          id: req_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
          created: 1736516600000
          modified: 1736516600000
          isPrivate: false
          description: >
            **Get Users List**


            Retrieves a paginated list of users with advanced filtering, search, and sorting capabilities.


            **Authentication:** Required (Bearer Token) - Admin, Researcher, or Superadmin role


            **Query Parameters:**

            - `search`: Optional, string, search by name or email

            - `role`: Optional, filter by role (user, admin, researcher, superadmin)

            - `verified`: Optional, boolean, filter by email verification status

            - `oauth`: Optional, boolean, filter by OAuth users (Google)

            - `created_from`: Optional, date, filter users created from this date

            - `created_to`: Optional, date, filter users created up to this date

            - `page`: Optional, integer, page number (default: 1)

            - `per_page`: Optional, integer, items per page (max: 100, default: 10)

            - `sort_by`: Optional, sort field (name, email, role, created_at, updated_at, email_verified_at)

            - `sort_direction`: Optional, sort direction (asc, desc, default: desc)


            **Permission Rules:**

            - **All user roles:** Can see all users regardless of role (no viewing restrictions)

            - **Admins:** Can view all users, edit users with role 'user' and 'researcher'

            - **Researchers:** Can view all users (no editing permissions)

            - **Superadmins:** Can view and edit all users (no restrictions)


            **Success Response (200):**

            ```json

            {
              "status": "success",
              "message": "Users filtered by admin permissions",
              "data": {
                "current_page": 1,
                "data": [
                  {
                    "id": 1,
                    "name": "John Doe",
                    "email": "john@example.com",
                    "role": "user",
                    "avatar": "https://example.com/avatar.jpg",
                    "google_id": null,
                    "email_verified_at": "2023-01-01T00:00:00.000000Z",
                    "created_at": "2023-01-01T00:00:00.000000Z",
                    "updated_at": "2023-01-01T00:00:00.000000Z"
                  }
                ],
                "first_page_url": "http://localhost:8000/api/admin/users?page=1",
                "from": 1,
                "last_page": 1,
                "last_page_url": "http://localhost:8000/api/admin/users?page=1",
                "links": [],
                "next_page_url": null,
                "path": "http://localhost:8000/api/admin/users",
                "per_page": 10,
                "prev_page_url": null,
                "to": 1,
                "total": 1
              }
            }

            ```


            **Error Response (403):**

            ```json

            {
              "status": "error",
              "message": "Unauthorized. Only admins, researchers, and superadmins can view users."
            }

            ```


            **Example Usage:**

            - Basic list: `GET /api/admin/users`

            - Search users: `GET /api/admin/users?search=john`

            - Filter by role: `GET /api/admin/users?role=admin`

            - Date range: `GET /api/admin/users?created_from=2023-01-01&created_to=2023-12-31`

            - Pagination: `GET /api/admin/users?page=2&per_page=20`

            - Sort by name: `GET /api/admin/users?sort_by=name&sort_direction=asc`
          sortKey: -1736516600000
        method: GET
        headers:
          - name: Authorization
            value: Bearer {{ _.token }}
          - name: User-Agent
            value: insomnia/11.2.0
          - name: accept
            value: application/json
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.host }}/api/admin/users/{{ _.user_id }}"
        name: View User
        meta:
          id: req_f8g5f6e5d4c3b2a1f0e9d8c7b6a5f4e3
          created: 1736516500000
          modified: 1736516500000
          isPrivate: false
          description: >
            **View User Details**


            Allows admin, researcher, and superadmin users to view detailed information about a specific user.


            **Authentication:** Required (Bearer Token) - Admin, Researcher, or Superadmin role


            **Path Parameters:**

            - `user_id`: The ID of the user to view


            **Permission Rules:**

            - **Admins:** Can only view regular users and researchers (role: 'user', 'researcher')

            - **Researchers:** Can only view regular users (role: 'user')

            - **Superadmins:** Can view any user


            **Success Response (200):**

            ```json

            {
              "status": "success",
              "message": "User details retrieved successfully",
              "data": {
                "id": 1,
                "name": "John Doe",
                "email": "john@example.com",
                "role": "user",
                "avatar": "https://example.com/avatar.jpg",
                "google_id": "1234567890",
                "email_verified_at": "2023-01-01T00:00:00.000000Z",
                "created_at": "2023-01-01T00:00:00.000000Z",
                "updated_at": "2023-01-01T00:00:00.000000Z"
              }
            }

            ```


            **Error Response (403):**

            ```json

            {
              "status": "error",
              "message": "Unauthorized. Only admins, researchers, and superadmins can view users."
            }

            ```


            **Error Response (403) - Role Restriction:**

            ```json

            {
              "status": "error",
              "message": "Unauthorized. Admins can only view regular users and researchers."
            }

            ```


            **Error Response (404):**

            ```json

            {
              "status": "error",
              "message": "User not found"
            }

            ```
          sortKey: -1736516500000
        method: GET
        headers:
          - name: Authorization
            value: Bearer {{ _.token }}
          - name: User-Agent
            value: insomnia/11.2.0
          - name: accept
            value: application/json
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.host }}/api/admin/users/{{ _.user_id }}"
        name: Delete User
        meta:
          id: req_d3l3t3u5er1d2c3b4a5f6e7g8h9i0j1k2
          created: 1736516700000
          modified: 1736516700000
          isPrivate: false
          description: >
            **Delete User**


            Permanently deletes a user account from the system. Only superadmins can perform this action.


            **Authentication:** Required (Bearer Token) - Superadmin role only


            **Path Parameters:**

            - `user_id`: The ID of the user to delete


            **Permission Rules:**

            - **Superadmins:** Can delete any user except themselves (self-deletion prevention)

            - **Admins/Researchers:** Cannot delete users (403 Forbidden)


            **Security Features:**

            - Automatically revokes all API tokens for the deleted user

            - Prevents accidental self-deletion

            - Returns deleted user data for audit purposes

            - Permanently removes user from database


            **Success Response (200):**

            ```json

            {
              "success": true,
              "message": "User deleted successfully",
              "data": {
                "id": 123,
                "name": "John Doe",
                "email": "john@example.com",
                "role": "user",
                "avatar": null,
                "google_id": null,
                "email_verified_at": "2023-01-01T00:00:00.000000Z",
                "created_at": "2023-01-01T00:00:00.000000Z",
                "updated_at": "2023-01-01T00:00:00.000000Z"
              }
            }

            ```


            **Error Response (400) - Self Deletion:**

            ```json

            {
              "success": false,
              "message": "You cannot delete your own account"
            }

            ```


            **Error Response (403) - Insufficient Permissions:**

            ```json

            {
              "success": false,
              "message": "Unauthorized. Only superadmins can delete users."
            }

            ```


            **Error Response (404) - User Not Found:**

            ```json

            {
              "success": false,
              "message": "User not found"
            }

            ```


            **Important Notes:**

            - This action is irreversible

            - All user data including tokens will be permanently removed

            - Use with extreme caution

            - Audit logs should be maintained for compliance
          sortKey: -1736516700000
        method: DELETE
        headers:
          - name: Authorization
            value: Bearer {{ _.token }}
          - name: User-Agent
            value: insomnia/11.2.0
          - name: accept
            value: application/json
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
    scripts:
      afterResponse: ""
      preRequest: ""
  - name: Cases
    meta:
      id: fld_c7d8e9f0a1b2c3d4e5f6a7b8c9d0e1f2
      created: 1751451883131
      modified: 1751451883131
      sortKey: -1751451883131
      description: "Legal cases endpoints for users and admin management"
    children:
      - url: "{{ _.host }}/api/cases?page=1&per_page=15&search=&country=&court=&topic=&level=&date_from=&date_to="
        name: List Cases
        meta:
          id: req_case_list_user_001
          created: 1751451883131
          modified: 1751451883131
          isPrivate: false
          description: >
            **List Legal Cases**


            Retrieves a paginated list of legal cases with advanced filtering and search capabilities.


            **Authentication:** Required (Bearer Token)


            **Query Parameters:**

            - `search`: Optional, string, search in title, body, court, citation

            - `country`: Optional, string, filter by country

            - `court`: Optional, string, filter by court

            - `topic`: Optional, string, filter by topic

            - `level`: Optional, string, filter by level

            - `date_from`: Optional, date, filter cases from this date (YYYY-MM-DD)

            - `date_to`: Optional, date, filter cases until this date (YYYY-MM-DD)

            - `page`: Optional, integer, page number (default: 1)

            - `per_page`: Optional, integer, items per page (default: 15)


            **Success Response (200):**

            ```json

            {
              "status": "success",
              "message": "Cases retrieved successfully",
              "data": {
                "cases": {
                  "data": [
                    {
                      "id": 1,
                      "title": "Case Title",
                      "body": "Case description...",
                      "report": "Case report...",
                      "course": "Law 101",
                      "topic": "Constitutional Law",
                      "tag": "landmark",
                      "principles": "Legal principles...",
                      "level": "Supreme Court",
                      "slug": "case-title",
                      "court": "Supreme Court",
                      "date": "2023-01-01",
                      "country": "Nigeria",
                      "citation": "2023 SCNJ 123",
                      "judges": "Justice A, Justice B",
                      "judicial_precedent": "Precedent details...",
                      "creator": {
                        "id": 1,
                        "name": "Admin User"
                      },
                      "created_at": "2023-01-01T00:00:00.000000Z",
                      "updated_at": "2023-01-01T00:00:00.000000Z"
                    }
                  ],
                  "pagination": {
                    "current_page": 1,
                    "per_page": 15,
                    "total": 100,
                    "last_page": 7
                  }
                }
              }
            }

            ```


            **Error Response (401):**

            ```json

            {
              "message": "Unauthenticated."
            }

            ```
          sortKey: -1751451883131
        method: GET
        headers:
          - name: Authorization
            value: Bearer {{ _.token }}
          - name: User-Agent
            value: insomnia/11.2.0
          - name: accept
            value: application/json
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.host }}/api/cases/{{ _.case_slug }}"
        name: View Case
        meta:
          id: req_case_view_user_001
          created: 1751451883131
          modified: 1751451883131
          isPrivate: false
          description: >
            **View Single Legal Case**


            Retrieves detailed information about a specific legal case.


            **Authentication:** Required (Bearer Token)


            **Path Parameters:**

            - `case_id`: The ID of the case to view (for admin endpoints)
            - `case_slug`: The slug of the case to view (for user endpoints)


            **Success Response (200):**

            ```json

            {
              "status": "success",
              "message": "Case retrieved successfully",
              "data": {
                "case": {
                  "id": 1,
                  "title": "Case Title",
                  "body": "Detailed case description...",
                  "report": "Case report...",
                  "course": "Law 101",
                  "topic": "Constitutional Law",
                  "tag": "landmark",
                  "principles": "Legal principles...",
                  "level": "Supreme Court",
                  "slug": "case-title",
                  "court": "Supreme Court",
                  "date": "2023-01-01",
                  "country": "Nigeria",
                  "citation": "2023 SCNJ 123",
                  "judges": "Justice A, Justice B",
                  "judicial_precedent": "Precedent details...",
                  "creator": {
                    "id": 1,
                    "name": "Admin User"
                  },
                  "created_at": "2023-01-01T00:00:00.000000Z",
                  "updated_at": "2023-01-01T00:00:00.000000Z"
                }
              }
            }

            ```


            **Error Response (401):**

            ```json

            {
              "message": "Unauthenticated."
            }

            ```


            **Error Response (404):**

            ```json

            {
              "status": "error",
              "message": "Case not found"
            }

            ```
          sortKey: -1751451883131
        method: GET
        headers:
          - name: Authorization
            value: Bearer {{ _.token }}
          - name: User-Agent
            value: insomnia/11.2.0
          - name: accept
            value: application/json
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.host }}/api/admin/cases?page=1&per_page=15&search=&country=&court=&topic=&level=&date_from=&date_to=&created_by="
        name: Admin - List Cases
        meta:
          id: req_case_list_admin_001
          created: 1751451883131
          modified: 1751451883131
          isPrivate: false
          description: >
            **Admin - List Legal Cases**


            Admin endpoint to retrieve a paginated list of legal cases with additional admin filters.


            **Authentication:** Required (Bearer Token) - Admin, Researcher, or Superadmin role


            **Query Parameters:**

            - `search`: Optional, string, search in title, body, court, citation

            - `country`: Optional, string, filter by country

            - `court`: Optional, string, filter by court

            - `topic`: Optional, string, filter by topic

            - `level`: Optional, string, filter by level

            - `date_from`: Optional, date, filter cases from this date (YYYY-MM-DD)

            - `date_to`: Optional, date, filter cases until this date (YYYY-MM-DD)

            - `created_by`: Optional, integer, filter by creator user ID (admin only)

            - `page`: Optional, integer, page number (default: 1)

            - `per_page`: Optional, integer, items per page (default: 15)


            **Success Response (200):**

            ```json

            {
              "status": "success",
              "message": "Cases retrieved successfully",
              "data": {
                "cases": {
                  "data": [
                    {
                      "id": 1,
                      "title": "Case Title",
                      "body": "Case description...",
                      "report": "Case report...",
                      "course": "Law 101",
                      "topic": "Constitutional Law",
                      "tag": "landmark",
                      "principles": "Legal principles...",
                      "level": "Supreme Court",
                      "slug": "case-title",
                      "court": "Supreme Court",
                      "date": "2023-01-01",
                      "country": "Nigeria",
                      "citation": "2023 SCNJ 123",
                      "judges": "Justice A, Justice B",
                      "judicial_precedent": "Precedent details...",
                      "creator": {
                        "id": 1,
                        "name": "Admin User"
                      },
                      "created_at": "2023-01-01T00:00:00.000000Z",
                      "updated_at": "2023-01-01T00:00:00.000000Z"
                    }
                  ],
                  "pagination": {
                    "current_page": 1,
                    "per_page": 15,
                    "total": 100,
                    "last_page": 7
                  }
                }
              }
            }

            ```


            **Error Response (403):**

            ```json

            {
              "status": "error",
              "message": "Unauthorized. Only admins, researchers, and superadmins can access admin endpoints."
            }

            ```
          sortKey: -1751451883131
        method: GET
        headers:
          - name: Authorization
            value: Bearer {{ _.token }}
          - name: User-Agent
            value: insomnia/11.2.0
          - name: accept
            value: application/json
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.host }}/api/admin/cases"
        name: Admin - Create Case
        meta:
          id: req_case_create_admin_001
          created: 1751451883131
          modified: 1751451883131
          isPrivate: false
          description: >
            **Admin - Create Legal Case**


            Creates a new legal case in the system.


            **Authentication:** Required (Bearer Token) - Admin, Researcher, or Superadmin role


            **Request Body:**

            ```json

            {
              "title": "Landmark Constitutional Case",
              "body": "Detailed case description and legal analysis...",
              "report": "Full case report with findings...",
              "course": "Constitutional Law 201",
              "topic": "Fundamental Rights",
              "tag": "landmark",
              "principles": "Constitutional interpretation principles...",
              "level": "Supreme Court",
              "court": "Supreme Court of Nigeria",
              "date": "2023-06-15",
              "country": "Nigeria",
              "citation": "2023 SCNJ 456",
              "judges": "Justice Adebayo, Justice Okafor, Justice Musa",
              "judicial_precedent": "Established precedent for constitutional interpretation..."
            }

            ```


            **Validation Rules:**

            - `title`: Required, string, max 255 characters

            - `body`: Required, string

            - `report`: Optional, string

            - `course`: Optional, string, max 255 characters

            - `topic`: Optional, string, max 255 characters

            - `tag`: Optional, string, max 255 characters  

            - `principles`: Optional, string

            - `level`: Optional, string, max 255 characters

            - `court`: Optional, string, max 255 characters

            - `date`: Optional, valid date (YYYY-MM-DD)

            - `country`: Optional, string, max 255 characters

            - `citation`: Optional, string, max 255 characters

            - `judges`: Optional, string

            - `judicial_precedent`: Optional, string


            **Success Response (201):**

            ```json

            {
              "status": "success",
              "message": "Case created successfully",
              "data": {
                "case": {
                  "id": 1,
                  "title": "Landmark Constitutional Case",
                  "body": "Detailed case description...",
                  "report": "Full case report...",
                  "course": "Constitutional Law 201",
                  "topic": "Fundamental Rights",
                  "tag": "landmark",
                  "principles": "Constitutional interpretation principles...",
                  "level": "Supreme Court",
                  "slug": "landmark-constitutional-case",
                  "court": "Supreme Court of Nigeria",
                  "date": "2023-06-15",
                  "country": "Nigeria",
                  "citation": "2023 SCNJ 456",
                  "judges": "Justice Adebayo, Justice Okafor, Justice Musa",
                  "judicial_precedent": "Established precedent...",
                  "creator": {
                    "id": 1,
                    "name": "Admin User"
                  },
                  "created_at": "2023-01-01T00:00:00.000000Z",
                  "updated_at": "2023-01-01T00:00:00.000000Z"
                }
              }
            }

            ```


            **Error Response (422):**

            ```json

            {
              "status": "error",
              "message": "Validation failed",
              "errors": {
                "title": ["Case title is required"],
                "body": ["Case body is required"]
              }
            }

            ```
          sortKey: -1751451883131
        method: POST
        body:
          mimeType: application/json
          text: |-
            {
            	"title": "{% faker 'randomWords', 5 %}",
            	"body": "{% faker 'randomParagraphs', 3 %}",
            	"report": "{% faker 'randomParagraphs', 2 %}",
            	"course": "Constitutional Law 201",
            	"topic": "Fundamental Rights",
            	"tag": "landmark",
            	"principles": "{% faker 'randomSentences', 2 %}",
            	"level": "Supreme Court",
            	"court": "Supreme Court of Nigeria",
            	"date": "2023-06-15",
            	"country": "Nigeria",
            	"citation": "2023 SCNJ 456",
            	"judges": "Justice Adebayo, Justice Okafor, Justice Musa",
            	"judicial_precedent": "{% faker 'randomSentences', 3 %}"
            }
        headers:
          - name: Authorization
            value: Bearer {{ _.token }}
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
          - name: accept
            value: application/json
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.host }}/api/admin/cases/{{ _.case_id }}"
        name: Admin - View Case
        meta:
          id: req_case_view_admin_001
          created: 1751451883131
          modified: 1751451883131
          isPrivate: false
          description: >
            **Admin - View Legal Case**


            Admin endpoint to view detailed information about a specific legal case.


            **Authentication:** Required (Bearer Token) - Admin, Researcher, or Superadmin role


            **Path Parameters:**

            - `case_id`: The ID of the case to view (for admin endpoints)
            - `case_slug`: The slug of the case to view (for user endpoints)


            **Success Response (200):**

            ```json

            {
              "status": "success",
              "message": "Case retrieved successfully",
              "data": {
                "case": {
                  "id": 1,
                  "title": "Case Title",
                  "body": "Detailed case description...",
                  "report": "Case report...",
                  "course": "Law 101",
                  "topic": "Constitutional Law",
                  "tag": "landmark",
                  "principles": "Legal principles...",
                  "level": "Supreme Court",
                  "slug": "case-title",
                  "court": "Supreme Court",
                  "date": "2023-01-01",
                  "country": "Nigeria",
                  "citation": "2023 SCNJ 123",
                  "judges": "Justice A, Justice B",
                  "judicial_precedent": "Precedent details...",
                  "creator": {
                    "id": 1,
                    "name": "Admin User"
                  },
                  "created_at": "2023-01-01T00:00:00.000000Z",
                  "updated_at": "2023-01-01T00:00:00.000000Z"
                }
              }
            }

            ```


            **Error Response (403):**

            ```json

            {
              "status": "error",
              "message": "Unauthorized. Only admins, researchers, and superadmins can access admin endpoints."
            }

            ```
          sortKey: -1751451883131
        method: GET
        headers:
          - name: Authorization
            value: Bearer {{ _.token }}
          - name: User-Agent
            value: insomnia/11.2.0
          - name: accept
            value: application/json
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.host }}/api/admin/cases/{{ _.case_id }}"
        name: Admin - Update Case
        meta:
          id: req_case_update_admin_001
          created: 1751451883131
          modified: 1751451883131
          isPrivate: false
          description: >
            **Admin - Update Legal Case**


            Updates an existing legal case in the system.


            **Authentication:** Required (Bearer Token) - Admin, Researcher, or Superadmin role


            **Path Parameters:**

            - `case_id`: The ID of the case to update (admin endpoint uses ID)


            **Request Body:** (All fields are optional for updates)

            ```json

            {
              "title": "Updated Case Title",
              "body": "Updated case description...",
              "report": "Updated case report...",
              "course": "Advanced Constitutional Law",
              "topic": "Updated topic",
              "tag": "updated",
              "principles": "Updated legal principles...",
              "level": "Court of Appeal",
              "court": "Court of Appeal, Lagos",
              "date": "2023-07-20",
              "country": "Nigeria",
              "citation": "2023 CA 789",
              "judges": "Justice Updated Names",
              "judicial_precedent": "Updated precedent information..."
            }

            ```


            **Validation Rules:**

            - `title`: Optional, string, max 255 characters

            - `body`: Optional, string

            - `report`: Optional, string

            - `course`: Optional, string, max 255 characters

            - `topic`: Optional, string, max 255 characters

            - `tag`: Optional, string, max 255 characters

            - `principles`: Optional, string

            - `level`: Optional, string, max 255 characters

            - `court`: Optional, string, max 255 characters

            - `date`: Optional, valid date (YYYY-MM-DD)

            - `country`: Optional, string, max 255 characters

            - `citation`: Optional, string, max 255 characters

            - `judges`: Optional, string

            - `judicial_precedent`: Optional, string


            **Success Response (200):**

            ```json

            {
              "status": "success",
              "message": "Case updated successfully",
              "data": {
                "case": {
                  "id": 1,
                  "title": "Updated Case Title",
                  "body": "Updated case description...",
                  "report": "Updated case report...",
                  "course": "Advanced Constitutional Law",
                  "topic": "Updated topic",
                  "tag": "updated",
                  "principles": "Updated legal principles...",
                  "level": "Court of Appeal",
                  "slug": "updated-case-title",
                  "court": "Court of Appeal, Lagos",
                  "date": "2023-07-20",
                  "country": "Nigeria",
                  "citation": "2023 CA 789",
                  "judges": "Justice Updated Names",
                  "judicial_precedent": "Updated precedent information...",
                  "creator": {
                    "id": 1,
                    "name": "Admin User"
                  },
                  "created_at": "2023-01-01T00:00:00.000000Z",
                  "updated_at": "2023-01-01T12:00:00.000000Z"
                }
              }
            }

            ```


            **Error Response (422):**

            ```json

            {
              "status": "error",
              "message": "Validation failed",
              "errors": {
                "title": ["Case title cannot exceed 255 characters"]
              }
            }

            ```
          sortKey: -1751451883131
        method: PUT
        body:
          mimeType: application/json
          text: |-
            {
            	"title": "Updated Case Title",
            	"body": "This is an updated case description with more details...",
            	"report": "Updated comprehensive case report...",
            	"topic": "Updated Legal Topic",
            	"level": "Court of Appeal",
            	"court": "Court of Appeal, Lagos"
            }
        headers:
          - name: Authorization
            value: Bearer {{ _.token }}
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
          - name: accept
            value: application/json
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.host }}/api/admin/cases/{{ _.case_id }}"
        name: Admin - Delete Case
        meta:
          id: req_case_delete_admin_001
          created: 1751451883131
          modified: 1751451883131
          isPrivate: false
          description: >
            **Admin - Delete Legal Case**


            Permanently deletes a legal case from the system.


            **Authentication:** Required (Bearer Token) - Admin, Researcher, or Superadmin role


            **Path Parameters:**

            - `case_id`: The ID of the case to delete (admin endpoint uses ID)


            **Success Response (200):**

            ```json

            {
              "status": "success",
              "message": "Case deleted successfully",
              "data": []
            }

            ```


            **Error Response (403):**

            ```json

            {
              "status": "error",
              "message": "Unauthorized. Only admins, researchers, and superadmins can delete cases."
            }

            ```


            **Error Response (404):**

            ```json

            {
              "status": "error",
              "message": "Case not found"
            }

            ```


            **Important Notes:**

            - This action is irreversible

            - The case will be permanently removed from the database

            - Use with caution
          sortKey: -1751451883131
        method: DELETE
        headers:
          - name: Authorization
            value: Bearer {{ _.token }}
          - name: User-Agent
            value: insomnia/11.2.0
          - name: accept
            value: application/json
        scripts:
          preRequest: ""
          afterResponse: ""
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
    scripts:
      afterResponse: ""
      preRequest: ""
cookieJar:
  name: Default Jar
  meta:
    id: jar_be302710455e4f688418d5e29428f0b8
    created: 1751451855527
    modified: 1751451855527
environments:
  name: Base Environment
  meta:
    id: env_aa2036daf4eb425d82301414b8ca1b59
    created: 1751451855524
    modified: 1751451855524
    isPrivate: false
  subEnvironments:
    - name: Local
      meta:
        id: env_f7a97a95d32d42fbb25d0579b9ace2df
        created: 1751451892234
        modified: 1752114137063
        isPrivate: false
        sortKey: 1751451892234
      data:
        host: http://127.0.0.1:8000
        token: 7|twVxyhhfpfK3m5vEo3IQANYQEePf5jFNyjpAsM6d531ca79d
        user_id: 1
        case_id: 1
        case_slug: test-id-based-update
      color: "#41c238"
    - name: Web
      meta:
        id: env_a1490f7fb38f47268495db73631d809e
        created: 1751451906707
        modified: 1752112583171
        isPrivate: false
        sortKey: 1751451906707
      data:
        host: https://rest.lawexa.com
        token: 51|yYMUEHdTyrD0MT0L8p2vl0Fj1VJCYS0SSqcFEbO11fd09933
        user_id: 1
        case_id: 1
        case_slug: test-case-slug
      color: "#b91313"
